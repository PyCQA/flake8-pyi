import math
import os
import sys

import _typeshed
from _typeshed import SupportsRead, SupportsWrite, sentinel

def f1(x: int = ...) -> None: ...
def f2(x: int = 3) -> None: ...
def f201(x: int = -3) -> None: ...
def f202(x: float = 3.14) -> None: ...
def f203(x: type = int) -> None: ...  # Y011 Only simple default values allowed for typed arguments
def f204(x: float = math.inf) -> None: ...
def f205(x: float = math.pi) -> None: ...
def f206(x: float = -math.inf) -> None: ...
def f207(x: float = -math.e) -> None: ...
def f208(x: float = math.nan) -> None: ...
def f209(x: float = -math.nan) -> None: ...  # Y011 Only simple default values allowed for typed arguments
def f210(x: float = float("inf")) -> None: ...  # Y011 Only simple default values allowed for typed arguments
def f3(*, x: int = ...) -> None: ...
def f4(*, x: complex = 3j) -> None: ...
def f401(*, x: complex = 5 + 3j) -> None: ...
def f402(*, x: complex = -42 - 42j) -> None: ...
def f403(*, x: complex = -42.37 + 8.35j) -> None: ...
def f405(*, x: int = 3 * 3) -> None: ...  # Y011 Only simple default values allowed for typed arguments
def f406(*, x: int = -3 >> 3) -> None: ...  # Y011 Only simple default values allowed for typed arguments
def f407(*, x: complex = math.inf + 1j) -> None: ...  # Y011 Only simple default values allowed for typed arguments
def f408(*, x: complex = math.tau * 1j) -> None: ...  # Y011 Only simple default values allowed for typed arguments
def f409(*, x: complex = math.inf + math.inf * 1j) -> None: ...  # Y011 Only simple default values allowed for typed arguments
def f5(x=3) -> None: ...
def f6(*, x: int) -> None: ...
def f7(x, y: int = 3) -> None: ...
def f8(x, y: int = ...) -> None: ...
def f9(x, y: str = "x") -> None: ...
def f901(x, y: str = os.pathsep) -> None: ...  # Y011 Only simple default values allowed for typed arguments
def f10(x, y: str = ..., *args: "int") -> None: ...  # Y020 Quoted annotations should never be used in stubs
def f11(*, x: str = "x") -> None: ...
def f12(*, x: str = ..., **kwargs: "int") -> None: ...  # Y020 Quoted annotations should never be used in stubs
def f13(x: list[str] = ["foo", "bar", "baz"]) -> None: ...
def f14(x: tuple[str, ...] = ("foo", "bar", "baz")) -> None: ...
def f15(x: set[str] = {"foo", "bar", "baz"}) -> None: ...
def f151(x: dict[int, int] = {1: 2}) -> None: ...
# When parsed, this case results in `None` being placed in the `.keys` list for the `ast.Dict` node
def f152(x: dict[int, int] = {1: 2, **{3: 4}}) -> None: ...  # Y011 Only simple default values allowed for typed arguments
def f153(x: list[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) -> None: ...  # Y011 Only simple default values allowed for typed arguments
def f154(x: tuple[str, ...] = ("foo", ("bar", "baz"))) -> None: ...  # Y011 Only simple default values allowed for typed arguments
def f141(x: list[int] = [*range(10)]) -> None: ...  # Y011 Only simple default values allowed for typed arguments
def f142(x: list[int] = list(range(10))) -> None: ...  # Y011 Only simple default values allowed for typed arguments
def f16(x: frozenset[bytes] = frozenset({b"foo", b"bar", b"baz"})) -> None: ...  # Y011 Only simple default values allowed for typed arguments
def f17(x: str = "foo" + "bar") -> None: ...  # Y011 Only simple default values allowed for typed arguments
def f18(x: str = b"foo" + b"bar") -> None: ...  # Y011 Only simple default values allowed for typed arguments
def f19(x: object = "foo" + 4) -> None: ...  # Y011 Only simple default values allowed for typed arguments
def f20(x: int = 5 + 5) -> None: ...  # Y011 Only simple default values allowed for typed arguments
def f21(x: complex = 3j - 3j) -> None: ...  # Y011 Only simple default values allowed for typed arguments
def f22(x: complex = -42.5j + 4.3j) -> None: ...  # Y011 Only simple default values allowed for typed arguments

# Special-cased attributes
def f23(x: str = sys.base_prefix) -> None: ...
def f24(x: str = sys.byteorder) -> None: ...
def f25(x: str = sys.exec_prefix) -> None: ...
def f26(x: str = sys.executable) -> None: ...
def f27(x: int = sys.hexversion) -> None: ...
def f28(x: int = sys.maxsize) -> None: ...
def f29(x: str = sys.platform) -> None: ...
def f30(x: str = sys.prefix) -> None: ...
def f31(x: SupportsRead[str] = sys.stdin) -> None: ...
def f32(x: SupportsWrite[str] = sys.stdout) -> None: ...
def f33(x: SupportsWrite[str] = sys.stderr) -> None: ...
def f34(x: str = sys.version) -> None: ...
def f35(x: tuple[int, ...] = sys.version_info) -> None: ...
def f36(x: str = sys.winver) -> None: ...
def f361(x: str | None = sentinel) -> None: ...
def f362(x: str | None = _typeshed.sentinel) -> None: ...

def f37(x: str = "a_very_long_stringgggggggggggggggggggggggggggggggggggggggggggggg") -> None: ...  # Y053 String and bytes literals >50 characters long are not permitted
def f38(x: bytes = b"a_very_long_byte_stringggggggggggggggggggggggggggggggggggggg") -> None: ...  # Y053 String and bytes literals >50 characters long are not permitted

foo: str = "a_very_long_stringgggggggggggggggggggggggggggggggggggggggggggggg"  # Y053 String and bytes literals >50 characters long are not permitted
bar: bytes = b"a_very_long_byte_stringggggggggggggggggggggggggggggggggggggg"  # Y053 String and bytes literals >50 characters long are not permitted

# Tests for PEP-570 syntax
def f39(x: "int", /) -> None: ...  # Y020 Quoted annotations should never be used in stubs
def f40(x: int, /) -> None: ...
def f41(x: int, /, y: "int") -> None: ...  # Y020 Quoted annotations should never be used in stubs
def f42(x: str = "y", /) -> None: ...
def f43(x: str = os.pathsep, /) -> None: ...  # Y011 Only simple default values allowed for typed arguments
